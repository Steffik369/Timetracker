@inject NavigationManager NavManager
@inject MessageService _message

<Form Layout="Inline"
      Model="@timetrackerViewModel.JobItem"
      OnFinish="OnFinish">

    <FormItem Label="Title">
        <Input @bind-Value="@context.Title" />
    </FormItem>

    <FormItem Label="Type">
        <AutoComplete @bind-Value="@context.Type" Options="@timetrackerViewModel.JobTypes" />
    </FormItem>

    <FormItem Label="Start">
        <DatePicker @bind-Value="@context.Start" DisabledDate="date => date > timetrackerViewModel.JobItem.End?.Date" ShowTime='@("HH:mm")' Format='@("yyyy-MM-dd HH:mm")' />
    </FormItem>
    <FormItem Label="End">
        <DatePicker @bind-Value="@context.End" DisabledDate="date => date < timetrackerViewModel.JobItem.Start?.Date" ShowTime='@("HH:mm")' Format='@("yyyy-MM-dd HH:mm")' />
    </FormItem>

    <FormItem>
        <Button OnClick="()=>timetrackerViewModel.JobItem = new JobItem()" Disabled="@timetrackerViewModel.IsBusy">
            Clean
        </Button>
    </FormItem>

    <FormItem>
        <Button Type="@ButtonType.Primary" HtmlType="submit" Disabled="@timetrackerViewModel.IsBusy">
            Save
        </Button>
    </FormItem>
</Form>


@code
{
    [CascadingParameter(Name = "timetrackerViewModel")]
    ITimetrackerViewModel? timetrackerViewModel { get; set; }

    DateTime?[] dateTimes = new DateTime?[60];

    private async void OnFinish(EditContext editContext)
    {
        if (!(timetrackerViewModel.JobItem.End != null && timetrackerViewModel.JobItem.Start != null && (timetrackerViewModel.JobItem.End > timetrackerViewModel.JobItem.Start)))
        {
            await _message.Error("End time must be greater then Start time!");
            return;
        }

        if (string.IsNullOrWhiteSpace(timetrackerViewModel.JobItem.Type))
        {
            await _message.Error("Type can't be empty");
            return;
        }

        timetrackerViewModel.SaveJobItem(timetrackerViewModel.JobItem);
        NavManager.NavigateTo("timetrackerPage", forceLoad: true);
    }
}
